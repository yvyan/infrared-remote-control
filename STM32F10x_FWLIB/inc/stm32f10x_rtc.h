/**
  ******************************************************************************
  * @file    stm32f10x_rtc.h
  * @author  MCD Application Team
  * @version V3.5.0
  * @date    11-March-2011
  * @brief   This file contains all the functions prototypes for the RTC firmware 
  *          library.
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __STM32F10x_RTC_H
#define __STM32F10x_RTC_H

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f10x.h"

/** @addtogroup STM32F10x_StdPeriph_Driver
  * @{
  */

/** @addtogroup RTC
  * @{
  */ 

/** @defgroup RTC_Exported_Types
  * @{
  */ 

/**
  * @}
  */ 

/** @defgroup RTC_Exported_Constants
  * @{
  */

/** @defgroup RTC_interrupts_define 
  * @{
  */

#define RTC_IT_OW            ((uint16_t)0x0004)  /*!< Overflow interrupt */
#define RTC_IT_ALR           ((uint16_t)0x0002)  /*!< Alarm interrupt */
#define RTC_IT_SEC           ((uint16_t)0x0001)  /*!< Second interrupt */
#define IS_RTC_IT(IT) ((((IT) & (uint16_t)0xFFF8) == 0x00) && ((IT) != 0x00))
#define IS_RTC_GET_IT(IT) (((IT) == RTC_IT_OW) || ((IT) == RTC_IT_ALR) || \
                           ((IT) == RTC_IT_SEC))
/**
  * @}
  */ 

/** @defgroup RTC_interrupts_flags 
  * @{
  */

#define RTC_FLAG_RTOFF       ((uint16_t)0x0020)  /*!< RTC Operation OFF flag */
#define RTC_FLAG_RSF         ((uint16_t)0x0008)  /*!< Registers Synchronized flag */
#define RTC_FLAG_OW          ((uint16_t)0x0004)  /*!< Overflow flag */
#define RTC_FLAG_ALR         ((uint16_t)0x0002)  /*!< Alarm flag */
#define RTC_FLAG_SEC         ((uint16_t)0x0001)  /*!< Second flag */
#define IS_RTC_CLEAR_FLAG(FLAG) ((((FLAG) & (uint16_t)0xFFF0) == 0x00) && ((FLAG) != 0x00))
#define IS_RTC_GET_FLAG(FLAG) (((FLAG) == RTC_FLAG_RTOFF) || ((FLAG) == RTC_FLAG_RSF) || \
                               ((FLAG) == RTC_FLAG_OW) || ((FLAG) == RTC_FLAG_ALR) || \
                               ((FLAG) == RTC_FLAG_SEC))
#define IS_RTC_PRESCALER(PRESCALER) ((PRESCALER) <= 0xFFFFF)

/**
  * @}
  */

/**
  * @}
  */

/** @defgroup RTC_Exported_Macros
  * @{
  */

/**
  * @}
  */

/** @defgroup RTC_Exported_Functions
  * @{
  */

void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState);//RTC中断配置
void RTC_EnterConfigMode(void);//RTC进入配置模式
void RTC_ExitConfigMode(void);//RTC退出配置模式
uint32_t  RTC_GetCounter(void);//获得RTC计数值
void RTC_SetCounter(uint32_t CounterValue);//设置计数值
void RTC_SetPrescaler(uint32_t PrescalerValue);//设置预装载寄存器的值
void RTC_SetAlarm(uint32_t AlarmValue);//设置闹钟
uint32_t  RTC_GetDivider(void);//获得分频系数
void RTC_WaitForLastTask(void);//等待最近一次RTC寄存器的写操作完成
void RTC_WaitForSynchro(void);//等待RTC寄存器（RTC_CNT,RTC_ALR，RTC_PRL）与RTC的APB时总能同步
FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG);//检查指定的RTC标志位设置与否
void RTC_ClearFlag(uint16_t RTC_FLAG);//清除RTC的待处理标志位
ITStatus RTC_GetITStatus(uint16_t RTC_IT);//检查只等的RTC中断发生与否
void RTC_ClearITPendingBit(uint16_t RTC_IT);//清除RTC的中断待处理位

#ifdef __cplusplus
}
#endif

#endif /* __STM32F10x_RTC_H */
/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

/******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/
/*
RTC_CRH寄存器:控制中断
偏移地址：0x00
复位值：0x0000
 15	14	13	12	11	10	9	8	7	6	5	4	3   2	 1	   0
 -----------------------------------------------------------------
|						保留					 |OWIE|ALRIE|SECIE|
 -----------------------------------------------------------------
													rw	 rw	   rw
 -----------------------------------------------------------------
|位15:3 	|保留，被硬件强制位0.								  |
|-----------------------------------------------------------------|
|位2		|OWIE：允许溢出中断.									  |
|			|0：屏蔽（不允许）溢出中断							  |																
|			|1：允许溢出中断										  |															
|-----------------------------------------------------------------|
|位1		|ALRIE：允许闹钟中断.								  |
|			|0：屏蔽（不允许）闹钟中断							  |																
|			|1：允许闹钟中断										  |																
|-----------------------------------------------------------------|
|位0		|SECIE：允许秒中断.									  |
|			|0：屏蔽（不允许），秒中断							  |																
|			|1：允许秒中断										  |																
 -----------------------------------------------------------------
 RTC_CRL寄存器
偏移地址：0x04
复位值：0x0020
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|						保留		 	  |RTOFF|  CNF	|  RSF	|  OWF	|	ALRF	|  SECF	  |
 ---------------------------------------------------------------------------------------------
											  r     rw     rc w0  rc  w0  rc  	w0	  rc  w0
 ----------------------------------------------------------------------------------------
|位15:6 	|保留，被硬件强制位0.								  						 |
|-----------|----------------------------------------------------------------------------|
|位5		|RTOFF：RTC操作关闭。								  						 |
|			|RTC模块利用这一位来只是对其寄出去你进行的最后一次操作的状态，指示操作是否完成.	 |
|			|若此位为0，则表示无法对任何的RTC寄存器进行写操作。此位为只读位。				 |
|			|0：上一次对RTC寄存器的写操作仍在进行，							             |																
|			|1：上一次对RTC寄存器的写操作已经完成	。  									 |																 
|-----------|----------------------------------------------------------------------------|
|位4		|CNF：配置标志.						    								  	 |
|			|此位必须有软件置'1'以进入配置模式，从而允许向RTC_CNT,RTC_ALR,RTC_PRL寄存器写	 |
|			|入数据。只有当此位在被置‘1’并重新又软件清零后，才会执行写操作。				 |
|			|0：退出配置模式（开始更新RTC寄存器）								  			 |																
|			|1：进入配置模式			            										 |																
|-----------|----------------------------------------------------------------------------|
|位3		|RSF：寄存器同步标志.									       				 |
|			|每当RTC_CNT寄存器和RTC_DIV寄存器由软件更新或清零时，此位由硬件置一,在APB1      |
|			|复位后，或APB1时钟停止后，此位必须有软件清零。要进行任何的读操作之前,用户       |
|			|程序必须等待这位被硬件置一，以确保RTC_CNT,RTC_ALR和RTC_PRL已经被同步。   		 |
|			|0：寄存器未被同步	。									  					 |																
|			|1：寄存器已经被同步	。									    				 |																 
| ---------------------------------------------------------------------------------------|
|位2		|OWF：溢出标志。								  						         |
|			|当32位可编程计数器溢出时，此位由硬件置一。如果RTC_CRH寄存器中OWIE=1，则产生	 |
|			|中断。此位只能由软件清零。对此位写一无效。									 |
|			|0：无溢出														             |																
|			|1：32位可编程计数器溢出。				  									 |																 
|-----------|----------------------------------------------------------------------------|
|位1		|ALRF：闹钟标志.						    								  	 |
|			|当32位可编程计数器达到RTC_ALR急促器所设置的与定制，此位由硬件置一，若RTC_CRH	 |
|			|寄存器中的ALRIE=1，则产生中断，此位只能由软件清零，对此位写一无效。			 |
|			|0：无闹钟	。													  			 |																
|			|1：有闹钟。				            										 |																
|-----------|----------------------------------------------------------------------------|
|位0		|SECF：秒标志.									       						 |
|			|当32位可编程计数器预分频系数溢出时，此位由硬件置一同时RTC计数器加一，因此	     |
|			|此标志为分辨率可编程的RTC计数器提供一个周期性的信号（通常为1秒），如果			 |
|			|RTC_CRH寄存器中的SECIE=1，则产生秒中断，此位只能由软件清零，对此位写一		 |
|			|无效。																		 |
|			|0：秒中断条件不成立	。									  					 |																
|			|1：秒中断条件成立	。									    				 |																 
 ----------------------------------------------------------------------------------------



RTC_PRLH寄存器	：配置RTC分频数
偏移地址：0x08
复位值：0x0000
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|						保留		 	      			| 				 PRL[3:0]			  |
 ---------------------------------------------------------------------------------------------
															w		w		w			w
 ----------------------------------------------------------------------------------------
|位15:4 	|保留，被硬件强制位0.								  						 |
|-----------|----------------------------------------------------------------------------|
|位[3:0]	|PRL[3:0]：RTC预分频装载值高位。								  				 | 		 
|			|根据以下公式，这些为用来定义计数器的时钟频率：								 |
|			|fTR_CLK=	fRTC_CLK		。												 |									 
|			|		 ----------------				               						 |																
|			|  		  （PRL[19:0]+1）						 							 |																 
|			|  注：不推荐使用0值，否则无法正确的产生RTC中断和标志位。						 |																 
 ----------------------------------------------------------------------------------------


RTC_PRLL寄存器	：配置RTC分频数
偏移地址：0x10
复位值：0x8000

15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|										 PRL[15:0]			 								  |
 ---------------------------------------------------------------------------------------------
w	w	w	w	w	w	w	w	w	w		 w		w		w		w		 w			w											
 ----------------------------------------------------------------------------------------
|位[15:0]	|PRL[15:0]：RTC预分频装载值低位。								  			 | 		
|			|根据以下公式，这些为用来定义计数器的时钟频率：								 |
|			|fTR_CLK=	fRTC_CLK		。												 |									 
|			|		 ----------------				               						 |																
|			|  		  （PRL[19:0]+1）						 							 |																 
|			|  注：不推荐使用0值，否则无法正确的产生RTC中断和标志位。						 |																 
 ----------------------------------------------------------------------------------------

RTC预分频器余数寄存器（RTC_DIVH）	：
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
  ---------------------------------------------------------------------------------------------
 |										保留			|	RTC_DIV[19:16] 					  |
  ---------------------------------------------------------------------------------------------
															r		r		 r			r
 ----------------------------------------------------------------------------------------
|位15:4 	|保留，被硬件强制位0.								  						 |
|-----------|----------------------------------------------------------------------------|
|位[3:0]	|RTC_DIV[19:16]：RTC时钟分频器余数高位。（RTC clock divider high）			 | 		 
 ----------------------------------------------------------------------------------------

RTC预分频器余数寄存器低位：（RIC_DIVL）
偏移地址：0x14
复位值：0x8000
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|								RTC_DIV[15:0]	 			 								  |
 ---------------------------------------------------------------------------------------------
r	r	r 	r	 r	 r	r	r	r	r		 r		 r		r		r		  r			 r
 ----------------------------------------------------------------------------------------
|位[15:0]	|RTC_DIV[15:0]：RTCs时钟器余数低位（RTC  clock divider low）。	  			 | 		
 ----------------------------------------------------------------------------------------

RTC计数器寄存器高位：（RIC_CNTH）
偏移地址：0x18
复位值：0x0000
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|								RTC_CNT[31:16]	 			 								  |
 ---------------------------------------------------------------------------------------------
rw	rw	rw 	rw	 rw	 rw	rw	rw	rw	rw		 rw		 rw		rw		rw		  rw		rw
 ----------------------------------------------------------------------------------------
|位[15:0]	|RTC_CNT[15:0]：RTC计数器高位（RTC  counter high）。				  			 | 
|			|可通过读RTC_CNTH寄存器来获取RTC计数器当前值的高位部分。要对此寄存器进行		 |
|			|写操作前，必须进入配置模式。													 |		
 ----------------------------------------------------------------------------------------

RTC计数器寄存器低位：（RIC_CNTL）
偏移地址：0x1C
复位值：0x0000
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|								RTC_CNT[15:0]	 			 								  |
 ---------------------------------------------------------------------------------------------
rw	rw	rw 	rw	 rw	 rw	rw	rw	rw	rw		 rw		 rw		rw		rw		  rw		rw
 ----------------------------------------------------------------------------------------
|位[15:0]	|RTC_CNT[15:0]：RTC计数器高位（RTC  counter high）。				  			 | 
|			|可通过读RTC_CNTH寄存器来获取RTC计数器当前值的低位部分。要对此寄存器进行		 |
|			|写操作前，必须进入配置模式。													 |		
 ----------------------------------------------------------------------------------------

RTC闹钟寄存器高位：（RIC_ALRH）
偏移地址：0x20
复位值：0xFFFF
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|								RTC_ALR[31:16]	 			 								  |
 ---------------------------------------------------------------------------------------------
w	w	 w	 w	 w	w	w	w	w	w		w		w		w		w		 w			w
 ----------------------------------------------------------------------------------------
 |位[15:0]	|RTC_ALR[31:16]：RTC闹钟值高位（RTC  Alarm  high）。					  		 | 
|			|此寄存器用来保存由软件写入的闹钟时间的高位部分。要对此寄存器进行写操作			 |
|			|必须进入配置模式。															 |		
 ----------------------------------------------------------------------------------------

RTC计数器寄存器低位：（RIC_ALRL）
偏移地址：0x24
复位值：0xFFFF
 15	14	13	12	11	10	9	8	7	6		 5		4		3 	  	2		 1	   		0
 ---------------------------------------------------------------------------------------------
|								RTC_ALR[15:0]	 			 								  |
 ---------------------------------------------------------------------------------------------
w	w	 w	 w	 w	w	w	w	w	w		w		w		w		w		 w			w
 ----------------------------------------------------------------------------------------
|位[15:0]	|RTC_ALR[15:0]：RTC闹钟值高位（RTC  alrm high）。				  			 | 
|			|此寄存器用来保存由软件写入的闹钟时间的低位部分。要对此寄存器进行				 |
|			|写操作前，必须进入配置模式。													 |		
 ----------------------------------------------------------------------------------------


RCC_BDCR寄存器：备份区域控制寄存器
	31	30	29	28	27	26	25	24	23	22	21	20	19	18	17	16	
 --------------------------------------------------------------------
|												 		   	   |BDRST|
 --------------------------------------------------------------------
																  rw
	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0	
 --------------------------------------------------------------------
|	RTC|				   |RTCSEL|					  |
|   EN |				   |[1:0] |					  |
 --------------------------------------------------------------------
																  rw
	


*/
